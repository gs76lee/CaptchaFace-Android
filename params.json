{"name":"Captchaface SDK Android","tagline":"","body":"# Captchaface\r\n\r\nCaptchaFace is a tool that allows you to know if a mobile user is really human by identification of several visual steps through the camera.\r\n\r\n## Installation\r\n\r\n1. Download the [latest code version](https://github.com/wassafr/CaptchaFace-Android).\r\n2. Drag and drop the **armeabi-v7a** directory from the archive in your project navigator under **libs**.\r\n3. Drag and drop the **wassa** directory from the archive in your project navigator under **assets**.\r\n4. Drag and drop the **wassa-captchaface.jar** from the archive in your project navigator under **libs** and include it in built-path.\r\n\r\n## Usage\r\n\r\nTo run the example project, clone the repo.\r\n\r\nMake sure you also see [CaptchaFace documentation](http://wassafr.github.io/CaptchaFace-Android/wassa-captchaface-1.0.0-jdoc/index.html).\r\n\r\n###Basics\r\n1. Add the following code to your **AndroidManifest.xml** \r\n\r\n\t```xml\r\n\t\r\n\t\t<uses-permission\r\n\t        android:name=\"android.permission.CAMERA\"\r\n\t        android:required=\"true\" />\r\n\t    <uses-permission\r\n\t        android:name=\"android.permission.READ_EXTERNAL_STORAGE\"\r\n\t        android:required=\"false\" />\r\n\t    <uses-permission\r\n\t        android:name=\"android.permission.INTERNET\"\r\n\t        android:required=\"false\" />\r\n\t    <uses-permission\r\n\t        android:name=\"android.permission.ACCESS_NETWORK_STATE\"\r\n\t        android:required=\"false\" />\r\n\t\r\n\t    <uses-feature\r\n\t        android:name=\"android.hardware.camera\"\r\n\t        android:required=\"true\" />\r\n\t    <uses-feature\r\n\t        android:name=\"android.hardware.camera.autofocus\"\r\n\t        android:required=\"false\" />\r\n\t    <uses-feature\r\n\t        android:name=\"android.hardware.camera.front\"\r\n\t        android:required=\"false\" />\r\n\t    <uses-feature\r\n\t        android:name=\"android.hardware.camera.front.autofocus\"\r\n\t        android:required=\"false\" />\r\n\t        \r\n    ```\r\n\r\n\r\n2. Plugin and files loading - Add the following line to your **Application.java** , onCreate()\r\n\r\n    ```java\r\n    \r\n        CaptchaUtils.loadPlugin(this);\r\n        \r\n    ```\r\n\r\n3. Render - Add the following line to your **layout_activity.xml**\r\n\r\n    ```xml\r\n    \r\n        <com.wassa.noyau.capture.input.KFrameRender\r\n            android:id=\"@+id/render\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\" />\r\n            \r\n    ```\r\n    \r\n4. Allow \"Keep Screen ON\" - Add the following line to your onCreate.\r\n\r\n    ```java\r\n    \r\n\t\t// this.setContentView(your_layout_activity.xml);\r\n\t\tthis.getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);\r\n\t\t\r\n    ```\r\n\r\n5. Setup your first CaptchaFace service - Add the following code to your onResume()\r\n\r\n    ```java\r\n    \r\n        if (!CaptchaUtils.isInit()) \r\n        {\r\n            CaptchaServiceStandalone newService = CaptchaUtils.createInstance(this, LICENCE_KEY);\r\n            newService.setRenderToMat(true);\r\n            newService.load(KInputCamId.CAMERA_ID_FRONT);\r\n        }\r\n        \r\n    ```\r\n    ```java\r\n    \r\n        final CaptchaServiceStandalone service = CaptchaUtils.getInstance();\r\n        \r\n    ```\r\n    ```java\r\n    \r\n        service.setOnFinished(new CaptchaOnFinished() {\r\n            @Override\r\n            public void onFinished(long _faceId, long _total, long _success) {\r\n                // YOUR CODE\r\n            }\r\n        });\r\n        \r\n    ```\r\n    ```java\r\n    \r\n        service.setOnFailed(new CaptchaOnFailed() {\r\n            @Override\r\n            public void onFailed(int _codeError) {\r\n                // YOUR CODE\r\n                // _codeError = 1 -> Network is required to lauch captchaface.\r\n                // _codeError = 2 -> Unable to contact captchaface server.\r\n                // _codeError = 3 -> The supplied licence key is invalid.\r\n            }\r\n        });\r\n        \r\n    ```\r\n\r\n6. Be smart and allow to release the service during background - Add the following line to your onPause() (You may have to use the main thread with **Handler**)\r\n\r\n   ```java\r\n   \r\n        CaptchaUtils.destroyInstance();  \r\n  \r\n   ```\r\n\r\n7. Submit random scenario\r\n\r\n    ```java\r\n    \r\n        service.submitScenario(min_random, max_random, max_time_to_process, time_to_wait_before_next_event);\r\n        \r\n    ```\r\n    \r\n8. (bis) Submit your own scenario\r\n    \r\n    ```java\r\n    \r\n        service.submitScenario(array_of_motion_event, max_time_to_process, time_to_wait_before_next_event);\r\n        \r\n    ```\r\n \r\n9. Start the record and the preview\r\n\r\n    ```java\r\n    \r\n        service.record(MyActivity.this, (KFrameRender) findViewById(R.id.render), true, true);\r\n        \r\n    ```\r\n\r\n10. Start the scenario !\r\n\r\n    ```java\r\n    \r\n        service.startScenario();\r\n\r\n    ```\r\n    \r\n\r\n## Requirements\r\n\r\n* Eclipse 4.3+\r\n* Android SDK 14+\r\n* armeabi-v7a\r\n\r\n## Author\r\n\r\nWassa, contact@wassa.fr\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}